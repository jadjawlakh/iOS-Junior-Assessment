// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MobAdSDK
import AVKit
import AdSupport
import CallKit
import CommonCrypto
import CoreLocation
import CoreTelephony
import Foundation
@_exported import MobAdSDK
import Moya
import NotificationCenter
import Swift
import UIKit
import UserNotifications
import UserNotificationsUI
public struct CarouselItem : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum MediaType : Swift.Codable {
  case carousel(_: [MobAdSDK.CarouselItem]?)
  case image
  case text
  case video
}
extension MediaType {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum NotificationCategory {
  case generic
  public func instance(with actions: [UserNotifications.UNNotificationAction]) -> UserNotifications.UNNotificationCategory
  public static func == (a: MobAdSDK.NotificationCategory, b: MobAdSDK.NotificationCategory) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class CachManager {
  @objc deinit
}
public enum MobAdError {
  case accessTokenMissing
  case accountAlreadyExists
  case appIdentifierMissing
  case deviceIdentifierMissing
  case emptyData
  case invalidLanguage
  case nounceMissing
  case missingAdServiceStatus
  case missingCoin
  case missingToken
  case missingLanguages
  case missingUser
  case sdkIdentifierMissing
  case userNotSignedIn
  case undetermined
  public static func == (a: MobAdSDK.MobAdError, b: MobAdSDK.MobAdError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct Subcategory : Swift.Codable {
  public var id: Swift.Int? {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var categoryId: Swift.Int? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Interests : Swift.Codable {
  public func allCategories() -> [MobAdSDK.Category]
  public func allSubcategories() -> [MobAdSDK.Subcategory]
  public func category(forIndex index: Swift.Int) -> MobAdSDK.Category
  public func subcategories(forCategoryId id: Swift.Int) -> [MobAdSDK.Subcategory]
  public func subcategories(for category: MobAdSDK.Category) -> [MobAdSDK.Subcategory]
  public func subcategories(forCategoryIndex index: Swift.Int) -> [MobAdSDK.Subcategory]
  public func subcategory(for indexPath: Foundation.IndexPath) -> MobAdSDK.Subcategory
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Language {
  public var code: Swift.String? {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var nativeName: Swift.String? {
    get
  }
}
public typealias Place = CoreLocation.CLPlacemark
public struct Category : Swift.Codable {
  public var id: Swift.Int? {
    get
  }
  public var name: Swift.String? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias SyncResult = UIKit.UIBackgroundFetchResult
public enum Event : Swift.Int {
  case call
  case locationChange
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MobAdSDK {
  public var backgroundSessionCompletionHandler: (() -> Swift.Void)?
  public static let shared: MobAdSDK.MobAdSDK
  @objc deinit
}
extension MobAdSDK {
  public var adServiceActive: Swift.Bool {
    get
  }
  public var isSignedIn: Swift.Bool {
    get
  }
  public var user: MobAdSDK.User? {
    get
  }
  public var userMaximumAdsPerDay: Swift.Int {
    get
  }
  public var languageCode: Swift.String {
    get
  }
  public var preferredAdLanguages: [Swift.String] {
    get
  }
}
extension MobAdSDK {
  public func handle(_ response: UserNotifications.UNNotificationResponse) -> Swift.Bool
  public func handleRemoteNotification(_ payload: [Swift.AnyHashable : Any], completion: @escaping (MobAdSDK.SyncResult?) -> Swift.Void) -> Swift.Bool
  public func initializeWith(identifier: Swift.String, group: Swift.String? = nil)
  public func activate(for events: [MobAdSDK.Event]? = nil)
  public func requestAlwaysAuthorizationForLocationMonitoring()
  public func canAskPermissionForAlwaysMonitoringLocation() -> Swift.Bool
  public func scheduleAdNotification(after time: Foundation.TimeInterval = 10, mediaType: MobAdSDK.MediaType = .text)
  public func signOutUser()
  public func syncAds(completion: ((MobAdSDK.SyncResult) -> Swift.Void)?)
}
extension MobAdSDK {
  public func adService(activate: Swift.Bool, completion: @escaping (Swift.Bool, MobAdSDK.MobAdError?) -> Swift.Void)
  public func allInterests(completion: @escaping (MobAdSDK.Interests?, MobAdSDK.MobAdError?) -> Swift.Void)
  public func getSupportedLanguages(completion: @escaping (Swift.Bool, [MobAdSDK.Language]?, MobAdSDK.MobAdError?) -> Swift.Void)
  public func getUserInterests(completion: ((Swift.Bool, [Swift.Int]?, MobAdSDK.MobAdError?) -> Swift.Void)?)
  public func getUserProfile(completion: ((Swift.Bool, MobAdSDK.User?, MobAdSDK.MobAdError?) -> Swift.Void)?)
  public func initiateUser(email: Swift.String?, password: Swift.String?, countryCode: Swift.String?, languageCode: Swift.String?, completion: ((Swift.Bool, MobAdSDK.MobAdError?) -> Swift.Void)?)
  public func registerRemoteNotifications(token: Swift.String, completion: ((Swift.Bool) -> Swift.Void)?)
  public func setUserInterests(subcategoriesIds: [Swift.Int], completion: ((Swift.Bool, MobAdSDK.MobAdError?) -> Swift.Void)?)
  public func updateUserProfile(countryCode: Swift.String?, languageCode: Swift.String?, maxAdsPerDay: Swift.Int?, preferredAdLanguagesCodes: [Swift.String]?, completion: ((Swift.Bool, Swift.Int?, MobAdSDK.MobAdError?) -> Swift.Void)?)
}
@objc @_inheritsConvenienceInitializers open class MobAdNotificationViewController : UIKit.UIViewController, UserNotificationsUI.UNNotificationContentExtension {
  @objc override dynamic open func viewDidLoad()
  @objc open func didReceive(_ notification: UserNotifications.UNNotification)
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public typealias SyncViewModelRecordRowInfo = (name: Swift.String, url: Foundation.URL, expiryDate: Foundation.Date, image: UIKit.UIImage?, mediaData: Foundation.Data?)
public typealias SyncViewModelScheduledAdRowInfo = (title: Swift.String, mediaType: Swift.String, thumbnail: Foundation.URL?, date: Foundation.Date?)
public class SyncViewModel {
  public init()
  public var records: MobAdSDK.SyncViewModel.Records {
    get
  }
  public var scheduledAds: MobAdSDK.SyncViewModel.ScheduledAds {
    get
  }
  public var recentSyncDate: Foundation.Date? {
    get
  }
  public var adsForSchedulingDate: Foundation.Date? {
    get
  }
  public var scheduledAdsDate: Foundation.Date? {
    get
  }
  @objc deinit
}
extension SyncViewModel {
  @_hasMissingDesignatedInitializers public class Records {
    public var numberOfRows: Swift.Int {
      get
    }
    public func infoForRow(at index: Swift.Int) -> MobAdSDK.SyncViewModelRecordRowInfo
    @objc deinit
  }
}
extension SyncViewModel {
  @_hasMissingDesignatedInitializers public class ScheduledAds {
    public var numberOfRows: Swift.Int {
      get
    }
    public func infoForRow(at index: Swift.Int) -> MobAdSDK.SyncViewModelScheduledAdRowInfo
    @objc deinit
  }
}
public struct User : Swift.Codable {
  public var email: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension MobAdSDK.NotificationCategory : Swift.Equatable {}
extension MobAdSDK.NotificationCategory : Swift.Hashable {}
extension MobAdSDK.MobAdError : Swift.Equatable {}
extension MobAdSDK.MobAdError : Swift.Hashable {}
extension MobAdSDK.Event : Swift.Equatable {}
extension MobAdSDK.Event : Swift.Hashable {}
extension MobAdSDK.Event : Swift.RawRepresentable {}
